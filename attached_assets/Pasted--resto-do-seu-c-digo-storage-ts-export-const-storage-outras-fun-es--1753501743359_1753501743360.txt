// ... resto do seu c√≥digo storage.ts ...

export const storage = {
  // ... outras fun√ß√µes ...

  createOrder: async (orderData: any): Promise<any> => {
    console.log('=== IN√çCIO CREATE ORDER ===');
    console.log('Order data recebido:', JSON.stringify(orderData, null, 2));
    
    try {
      const blackCatApiKey = process.env.BLACKCAT_API_KEY;
      
      console.log('Verificando API Key...');
      console.log('API Key presente:', !!blackCatApiKey);
      console.log('Primeiros 10 caracteres da key:', blackCatApiKey ? blackCatApiKey.substring(0, 10) + '...' : 'undefined');
      
      if (!blackCatApiKey) {
        console.error('‚ùå BLACKCAT_API_KEY n√£o configurada');
        throw new Error('BLACKCAT_API_KEY n√£o configurada no ambiente');
      }

      // Gerar identificador √∫nico mais robusto
      const identificador = `PEDIDO-${Date.now()}-${Math.floor(Math.random() * 10000)}`;
      console.log('üìù Identificador gerado:', identificador);

      // Validar valor
      const valorFloat = parseFloat(orderData.total);
      if (isNaN(valorFloat) || valorFloat <= 0) {
        throw new Error(`Valor inv√°lido: ${orderData.total}`);
      }
      console.log('üí∞ Valor validado:', valorFloat);

      // Preparar payload para BlackCat
      const pixPayload = {
        valor: valorFloat,
        identificador: identificador,
        solicitacao_pagador: "Pagamento - T√°bua de Minas"
      };
      
      console.log('üì§ Payload para BlackCat:', JSON.stringify(pixPayload, null, 2));

      console.log('üîÑ Fazendo requisi√ß√£o para BlackCat API...');
      
      // Fazer requisi√ß√£o com timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 segundos

      const pixResponse = await fetch('https://api.blackcat.bio/pix/solicitar', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${blackCatApiKey}`,
          'User-Agent': 'Tabua-de-Minas/1.0',
          'Accept': 'application/json'
        },
        body: JSON.stringify(pixPayload),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      console.log('üì• Resposta da BlackCat:');
      console.log('- Status:', pixResponse.status);
      console.log('- Status Text:', pixResponse.statusText);
      console.log('- Headers:', Object.fromEntries(pixResponse.headers));

      if (!pixResponse.ok) {
        const errorText = await pixResponse.text();
        console.error('‚ùå Erro da BlackCat API:', errorText);
        console.error('‚ùå Status completo:', {
          status: pixResponse.status,
          statusText: pixResponse.statusText,
          body: errorText
        });
        
        throw new Error(`BlackCat API Error ${pixResponse.status}: ${errorText}`);
      }

      const pixPayment = await pixResponse.json();
      console.log('‚úÖ PIX Payment recebido:', JSON.stringify(pixPayment, null, 2));

      // Validar resposta da BlackCat
      if (!pixPayment.pix || !pixPayment.pix.qrcode) {
        console.error('‚ùå Resposta inv√°lida da BlackCat:', pixPayment);
        throw new Error('Resposta inv√°lida da BlackCat API - QR Code n√£o encontrado');
      }

      const order = {
        id: orderIdCounter++,
        ...orderData,
        pixCode: pixPayment.pix.qrcode,
        pixKey: pixPayment.pix.chave || 'N/A',
        blackCatTransactionId: pixPayment.identificador,
        blackCatResponse: pixPayment, // Para debug
        createdAt: new Date(),
        status: 'pending'
      };
      
      orders.push(order);
      
      console.log('‚úÖ Pedido criado com sucesso:', {
        orderId: order.id,
        transactionId: order.blackCatTransactionId,
        pixCodeLength: order.pixCode.length
      });
      console.log('=== FIM CREATE ORDER ===');
      
      return order;
      
    } catch (error) {
      console.error('‚ùå ERRO GERAL em createOrder:');
      console.error('- Message:', error.message);
      console.error('- Stack:', error.stack);
      console.error('- Name:', error.name);
      
      if (error.name === 'AbortError') {
        console.error('‚ùå Timeout na requisi√ß√£o para BlackCat');
        throw new Error('Timeout ao conectar com a API de pagamento');
      }
      
      console.log('=== FIM CREATE ORDER (ERRO) ===');
      throw new Error(`Erro ao gerar c√≥digo PIX: ${error.message}`);
    }
  },

  // ... resto das fun√ß√µes ...
};